class @FeatureMap
  OVER_LEEDS = [53.801277, -1.548567]

  constructor: (@data_feature) ->
    @draw()

  getClassName = (s) ->
  <%=
    "
      if      #{Score::VERY_NEGATIVE.min}  <= s <= #{Score::VERY_NEGATIVE.max}  then 'very-negative'
      else if #{Score::NEGATIVE.min}       <= s <= #{Score::NEGATIVE.max}       then 'negative'
      else if                                 s == #{Score::NEUTRAL}            then 'neutral'
      else if #{Score::POSITIVE.min}       <= s <= #{Score::POSITIVE.max}       then 'positive'
      else if #{Score::VERY_POSITIVE.min}  <= s <= #{Score::VERY_POSITIVE.max}  then 'very-positive'
      else 'no-score'
    "
  %>

  bindPopup = (feature, layer) ->
    site = feature.properties # for readability in the template
    layer.bindPopup("""
      <h4><a href="/sites/#{site.shlaa_ref}">#{site.name}</a></h4>
      <strong>Score</strong>
      <span class="score label #{ if site.score? then getClassName(site.score) else ''}">
        #{if site.score? then site.score else 'N/A'}
      </span>
    """)

  createColorMarker = (feature, latlng) ->
    iconName = getClassName(feature.properties.score)
    icon = new ColorMarker({
      iconUrl:       "/assets/#{iconName}.png",
      iconRetinaUrl: "/assets/#{iconName}2x.png"
    })
    L.marker(latlng, { icon: icon })

  getBoundaryStyle = (feature) ->
    {
      style: null,
      className: "boundary #{getClassName(feature.properties.score)}"
    }

  createClusterIcon = (cluster) ->
    children = cluster.getChildCount()
    new L.DivIcon(
      {
        className: "leaflet-div-icon cluster",
        html: """
          <div class="cluster-inner"><div class="cluster-count">#{children}</div></div>
        """
      }
    )

  ColorMarker = L.Icon.extend({ options: {
    shadowUrl:   '/assets/marker-shadow.png'
    iconSize:    [25, 41], # size of the icon
    iconAnchor:  [12, 40], # point of the icon which will correspond to marker's location
    popupAnchor: [1, -40]  # point from which the popup should open relative to the iconAnchor
  }})

  draw: ->
    # @data_feature can be type: 'Feature' or type: 'FeatureCollection'
    if @data_feature.type == 'Feature' and !@data_feature.geometry?
      $('#map').remove()
      return

    map = L.map('map', {
      center: OVER_LEEDS,
      zoom: 12,
      scrollWheelZoom: false
    });

    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    markers = new L.MarkerClusterGroup({
      disableClusteringAtZoom: 13,
      showCoverageOnHover:     true,
      zoomToBoundsOnClick:     true,
      maxClusterRadius:        60,
      iconCreateFunction:      createClusterIcon
    })

    featureLayer = L.geoJson(
      @data_feature,
      onEachFeature: bindPopup,
      pointToLayer:  createColorMarker,
      style:         getBoundaryStyle
    )

    markers.addLayer(featureLayer)
    markers.addTo(map);

    options = if @data_feature.type == 'Feature' && @data_feature.geometry.type == 'Point' then { maxZoom: 15 } else {}

    # Cope with race condition causing map freeze. Decorous 50ms grace given
    setTimeout ( ->
      map.fitBounds(markers.getBounds(), options)
    ), 50
